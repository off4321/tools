#!/usr/bin/env python3
"""
MermaidË®òÊ≥ïÂá∫Âäõ„ÇØ„É©„Çπ„ÇíÊèê‰æõ„Åô„Çã„É¢„Ç∏„É•„Éº„É´
"""


class WriteMermaid:
    """
    MermaidË®òÊ≥ï„Åß„Ç∑„Éº„Ç±„É≥„ÇπÂõ≥„ÇíÂá∫Âäõ„Åô„Çã„ÇØ„É©„Çπ
    """
    
    # „Çµ„Éù„Éº„Éà„Åó„Å¶„ÅÑ„Çã„Éó„É≠„Éà„Ç≥„É´„ÅÆ„É™„Çπ„Éà
    supported_protocols = ['X.25', 'IPv4', 'ARP', 'TCP', 'UDP', 'DNS', 'HTTP', 'HTTPS', 'ICMP']
    
    def __init__(self, packet_data):
        """
        WriteMermaid„ÇØ„É©„Çπ„ÅÆÂàùÊúüÂåñ
        
        Args:
            packet_data (PacketSequenceData): „Éë„Ç±„ÉÉ„Éà„Ç∑„Éº„Ç±„É≥„ÇπÊÉÖÂ†±„ÇíÂê´„ÇÄ„Éá„Éº„ÇøÊßãÈÄ†
        """
        self.packet_data = packet_data
    
    def generate(self):
        """
        MermaidË®òÊ≥ï„ÅÆ„Ç∑„Éº„Ç±„É≥„ÇπÂõ≥„ÇíÁîüÊàê„Åô„Çã
        
        Returns:
            str: MermaidË®òÊ≥ï„ÅÆ„Ç∑„Éº„Ç±„É≥„ÇπÂõ≥
        """
        try:
            print("MermaidË®òÊ≥ï„ÅÆ„Ç∑„Éº„Ç±„É≥„ÇπÂõ≥„ÇíÁîüÊàê‰∏≠...")
            
            # „Ç∑„Éº„Ç±„É≥„ÇπÂõ≥„ÅÆ„Éò„ÉÉ„ÉÄ„Éº
            mermaid_content = "```mermaid\nsequenceDiagram\n"
            
            # ÂèÇÂä†ËÄÖ„ÅÆÂÆöÁæ©
            participants = self._generate_participants()
            mermaid_content += participants
            
            # „Ç∑„Éº„Ç±„É≥„Çπ„ÅÆÁîüÊàê
            sequences = self._generate_sequences()
            mermaid_content += sequences
            
            # „Ç∑„Éº„Ç±„É≥„ÇπÂõ≥„ÅÆ„Éï„ÉÉ„Çø„Éº
            mermaid_content += "```\n"
            
            print("MermaidË®òÊ≥ï„ÅÆ„Ç∑„Éº„Ç±„É≥„ÇπÂõ≥„ÅÆÁîüÊàêÂÆå‰∫Ü")
            return mermaid_content
            
        except Exception as e:
            print(f"MermaidË®òÊ≥ï„ÅÆ„Ç∑„Éº„Ç±„É≥„ÇπÂõ≥„ÅÆÁîüÊàê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {str(e)}")
            import traceback
            traceback.print_exc()
            return "```mermaid\nsequenceDiagram\n  Note over Error: „Ç∑„Éº„Ç±„É≥„ÇπÂõ≥„ÅÆÁîüÊàê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü\n```\n"
    
    def _generate_participants(self):
        """
        MermaidË®òÊ≥ï„ÅÆÂèÇÂä†ËÄÖÔºà„Ç¢„ÇØ„Çø„ÉºÔºâÂÆöÁæ©„ÇíÁîüÊàê„Åô„Çã
        
        Returns:
            str: ÂèÇÂä†ËÄÖÂÆöÁæ©„ÅÆÊñáÂ≠óÂàó
        """
        participants = ""
        
        # ÊôÇÈñìÂàóÁî®„ÅÆÁâπÂà•„Å™ÂèÇÂä†ËÄÖ„ÇíÊúÄÂàù„Å´ËøΩÂä†
        participants += "    participant Time as \"üïí Time\"\n"
        
        # „Éé„Éº„Éâ„ÅÆ„Çª„ÉÉ„Éà„Åã„ÇâÂèÇÂä†ËÄÖ„ÇíÁîüÊàê
        nodes = sorted(list(self.packet_data.get_nodes()))
        
        # ÂêÑ„Éé„Éº„Éâ„ÇíÂèÇÂä†ËÄÖ„Å®„Åó„Å¶ÂÆöÁæ©
        for node in nodes:
            # „Éé„Éº„ÉâÂêç„ÅåÈï∑„Åô„Åé„ÇãÂ†¥Âêà„ÅØÁü≠Á∏Æ„Åô„Çã
            safe_id = self._sanitize_id(node)
            if len(node) > 20:
                short_name = node[:8] + "..." + node[-8:] if len(node) > 20 else node
                participants += f"    participant {safe_id} as \"{node}\"\n"
            else:
                participants += f"    participant {safe_id} as \"{node}\"\n"
        
        return participants

    def _generate_sequences(self):
        """
        MermaidË®òÊ≥ï„ÅÆ„Ç∑„Éº„Ç±„É≥„Çπ„ÇíÁîüÊàê„Åô„Çã„ÄÇÂêÑ„Éë„Ç±„ÉÉ„Éà„Å´ÊôÇÈñìË°®Á§∫„ÇíËøΩÂä†„ÄÇ
        
        Returns:
            str: „Ç∑„Éº„Ç±„É≥„Çπ„ÅÆÊñáÂ≠óÂàó
        """
        sequences = ""
        
        # „Éë„Ç±„ÉÉ„ÉàÊÉÖÂ†±„ÅÆ„É™„Çπ„Éà„Åã„Çâ„Ç∑„Éº„Ç±„É≥„Çπ„ÇíÁîüÊàê
        packets = self.packet_data.get_packets()
        
        for i, packet in enumerate(packets):
            # ÈÄÅ‰ø°ÂÖÉ„ÄÅÂÆõÂÖà„ÄÅ„Éó„É≠„Éà„Ç≥„É´ÊÉÖÂ†±„ÇíÂèñÂæó
            src = packet.get('src', '')
            dst = packet.get('dst', '')
            protocol = packet.get('protocol', 'UNKNOWN')
            info = packet.get('info', {})
            current_time = packet.get('time')
            
            # „Çø„Ç§„É†„Çæ„Éº„É≥Â§âÊèõ„Çí„Åõ„Åö„ÄÅ„Éë„Ç±„ÉÉ„Éà„ÅÆÊôÇÂàª„Çí„Åù„ÅÆ„Åæ„ÅæË°®Á§∫
            time_str = current_time.strftime('%Y-%m-%d %H:%M:%S.%f')
            
            sequences += f"    Note right of Time: {time_str}\n"
            sequences += f"    Time-->>Time: üìç\n"
            
            # „É°„ÉÉ„Çª„Éº„Ç∏„ÅÆË©≥Á¥∞„ÇíÊßãÁØâ
            message = self._build_message(packet)
            
            # „Ç∑„Éº„Ç±„É≥„ÇπÁü¢Âç∞„ÇíËøΩÂä†Ôºà„É°„ÉÉ„Çª„Éº„Ç∏„Å®ÊôÇÈñì„ÅÆÊ≥®Ë®ò„ÇíÂàÜÈõ¢Ôºâ
            if src and dst:
                src_id = self._sanitize_id(src)
                dst_id = self._sanitize_id(dst)
                
                # „É°„ÉÉ„Çª„Éº„Ç∏Êú¨‰ΩìÔºà„Éó„É≠„Éà„Ç≥„É´ÊÉÖÂ†±„ÇÑVLANÊÉÖÂ†±„ÇíÂê´„ÇÄÔºâ
                message_text = self._escape(message) if message else ""
                sequences += f"    {src_id}->>+{dst_id}: {message_text}\n"
    
        return sequences
    
    def _build_message(self, packet):
        """
        „Éë„Ç±„ÉÉ„Éà„ÅÆË©≥Á¥∞„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÊßãÁØâ„Åô„Çã
        
        Args:
            packet: „Éë„Ç±„ÉÉ„ÉàÊÉÖÂ†±„ÅÆËæûÊõ∏
        
        Returns:
            str: „É°„ÉÉ„Çª„Éº„Ç∏ÊñáÂ≠óÂàó
        """
        protocol = packet.get('protocol', 'UNKNOWN')
        info = packet.get('info', {})
        protocol_info = info.get('protocol_info', {})
        message = ""

        print(f"DEBUG_buildmessage--„Éó„É≠„Éà„Ç≥„É´: {protocol}, „Éó„É≠„Éà„Ç≥„É´ÊÉÖÂ†±: {protocol_info}")

        # „ÇÇ„Åóprotocol„ÅåUNKNOWN„Åßprotocol_info„Å´„Éó„É≠„Éà„Ç≥„É´Âêç„Åå„ÅÇ„Çå„Å∞‰∏äÊõ∏„Åç
        if protocol != 'protocol_name' in protocol_info:
            protocol = protocol_info['protocol_name']

        # „ÇÇ„Åó‰∏äÊõ∏„ÅçÂæå„ÅÆprotocol„Åå„Çµ„Éù„Éº„ÉàÂ§ñ„Å™„Çâ [Êú™„Çµ„Éù„Éº„Éà„Éó„É≠„Éà„Ç≥„É´] „Çí‰ªòÂä†„Åó„Å¶Ëøî„Åô
        if protocol != 'UNKNOWN' and protocol not in self.supported_protocols:
            return f"{protocol} [Êú™„Çµ„Éù„Éº„Éà„Éó„É≠„Éà„Ç≥„É´]"
        
        # X.25„ÅÆÂá¶ÁêÜ„ÇíËøΩÂä†
        if 'x25_info' in protocol_info:
            x25_info = protocol_info['x25_info']
            packet_type_desc = x25_info.get('packet_type_desc', '')
            lcn = x25_info.get('lcn', '')
            
            if packet_type_desc:
                message = f"X.25 {packet_type_desc}"
                
                # Ë´ñÁêÜ„ÉÅ„É£„Éç„É´Áï™Âè∑„Åå„ÅÇ„Çå„Å∞ËøΩÂä†
                if lcn:
                    message += f" (LCN:{lcn})"
                
                # ÈÄÅÂèó‰ø°„Ç∑„Éº„Ç±„É≥„ÇπÁï™Âè∑„Åå„ÅÇ„Çå„Å∞ËøΩÂä†Ôºà„Éá„Éº„Çø„Éë„Ç±„ÉÉ„Éà„ÅÆÂ†¥ÂêàÔºâ
                if 'send_seq' in x25_info and 'recv_seq' in x25_info:
                    message += f" S:{x25_info['send_seq']}/R:{x25_info['recv_seq']}"
                
                # „ÇØ„É™„Ç¢„ÇÑ„É™„Çª„ÉÉ„Éà„ÅÆÂéüÂõ†„Åå„ÅÇ„Çå„Å∞ËøΩÂä†
                if 'cause_desc' in x25_info:
                    message += f": {x25_info['cause_desc']}"
            else:
                message = "X.25"
        
        # „Åù„ÅÆ‰ªñ„ÅÆÊó¢Â≠ò„ÅÆ„Éó„É≠„Éà„Ç≥„É´Âá¶ÁêÜÔºàÂ§âÊõ¥„Å™„ÅóÔºâ
        if 'ipv4_info' in protocol_info:
            ipv4_info = protocol_info['ipv4_info']
            ttl = ipv4_info.get('ttl', '')
            flags = ipv4_info.get('flags', '')
            
            # ICMP„ÅÆÂá¶ÁêÜ (IP„Éó„É≠„Éà„Ç≥„É´„Éä„É≥„Éê„Éº1„ÅØICMP)
            if info.get('ip_info', {}).get('protocol') == '1':  # ‰øÆÊ≠£ÁÆáÊâÄ: packet„Åã„Çâinfo„Å´Â§âÊõ¥
                message = "ICMP"
                if int(ttl) == 64:
                    # TTL„Å®‰ªñ„ÅÆÁâπÂæ¥„Åã„ÇâPing„ÇíÊé®Ê∏¨
                    if packet['src'] == '172.16.1.253' or packet['src'] == '172.16.2.254':
                        message = "ICMP Echo Request (Ping)"
                    else:
                        message = "ICMP Echo Reply (Ping)"
            else:
                message = "IPv4"
        
        # ARP„ÅÆÂá¶ÁêÜ
        if 'arp_info' in protocol_info:
            arp_info = protocol_info['arp_info']
            operation = arp_info.get('operation', '')
            
            if operation == 'REQUEST':
                message = f"ARP Request: Who has {arp_info.get('dst_ip', '')}?"
            elif operation == 'REPLY':
                message = f"ARP Reply: {arp_info.get('src_ip', '')} is at {arp_info.get('src_mac', '')}"
            else:
                message = f"ARP {operation}"
        
        # TCP„ÅÆÂá¶ÁêÜ
        if 'tcp_info' in protocol_info:
            tcp_info = protocol_info['tcp_info']
            src_port = tcp_info.get('src_port', '')
            dst_port = tcp_info.get('dst_port', '')
            flags_hex = tcp_info.get('flags', '0x0000')
            
            # „Éï„É©„Ç∞„ÅÆÁ∞°Êòì„Éá„Ç≥„Éº„Éâ
            flags_map = {
                0x0002: 'SYN',
                0x0012: 'SYN,ACK',
                0x0010: 'ACK',
                0x0011: 'FIN,ACK',
                0x0004: 'RST',
                # ...ÂøÖË¶Å„Å´Âøú„Åò„Å¶ËøΩÂä†...
            }
            try:
                flags_int = int(flags_hex, 16)
                decoded_flags = flags_map.get(flags_int, flags_hex)
            except ValueError:
                decoded_flags = flags_hex

            options = tcp_info.get('options', '')
            # „Ç™„Éó„Ç∑„Éß„É≥„ÅåÁ©∫„Åß„Å™„ÅÑÂ†¥Âêà„ÅÆ„ÅøË°®Á§∫
            if options:
                message = f"TCP {src_port}->{dst_port} (Flags: {decoded_flags}, Options: {options})"
            else:
                message = f"TCP {src_port}->{dst_port} (Flags: {decoded_flags})"
        
        # UDP„ÅÆÂá¶ÁêÜ
        if 'udp_info' in protocol_info:
            udp_info = protocol_info['udp_info']
            src_port = udp_info.get('src_port', '')
            dst_port = udp_info.get('dst_port', '')
            message = f"UDP {src_port}->{dst_port}"
        
        # DNS„ÅÆÂá¶ÁêÜ
        if 'dns_info' in protocol_info:
            dns_info = protocol_info['dns_info']
            domain = dns_info.get('domain', '')
            record_type = dns_info.get('type', '')
            resolved_ips = dns_info.get('resolved_ips', [])
            is_query = dns_info.get('is_query', False)
            error_code = dns_info.get('error_code', 0)
            error_message = dns_info.get('error_message', '')

            if is_query:
                message = f"DNS Query: {domain} (Type: {record_type})"
            else:
                if error_code != 0:  # „Ç®„É©„Éº„Åå„ÅÇ„ÇãÂ†¥Âêà
                    message = f"DNS Reply Error: {domain} (Type: {record_type}) - Code: {error_code}, {error_message}"
                else:
                    message = f"DNS Reply: {domain} (Type: {record_type}) => {', '.join(resolved_ips)}"
        
        # HTTP„ÅÆÂá¶ÁêÜ
        if 'http_info' in protocol_info:
            http_info = protocol_info['http_info']
            is_request = http_info.get('is_request', True)  # „Éá„Éï„Ç©„É´„Éà„ÅØ„É™„ÇØ„Ç®„Çπ„Éà„Å®‰ªÆÂÆö
            version = http_info.get('version', '')
            
            if is_request:
                method = http_info.get('method', '')
                url = http_info.get('url', '')
                message = f"HTTP {method} {url} ({version})"
            else:
                status_code = http_info.get('status_code', '')
                status_message = http_info.get('status_message', '')
                message = f"HTTP Response: {status_code} {status_message} ({version})"
        
        # HTTPS„ÅÆÂá¶ÁêÜ
        if 'https_info' in protocol_info:
            https_info = protocol_info['https_info']
            tls_version = https_info.get('tls_version', '')
            handshake_type = https_info.get('handshake_type', '')
            server_name = https_info.get('server_name', '')  # SNIÊÉÖÂ†±
            
            if handshake_type:
                if server_name:
                    message = f"TLS {handshake_type} ({tls_version}) - SNI: {server_name}"
                else:
                    message = f"TLS {handshake_type} ({tls_version})"
            else:
                message = f"HTTPS/TLS ({tls_version})"
        
        # SCTP„ÅÆÂá¶ÁêÜ
        if 'sctp_info' in protocol_info:
            sctp_info = protocol_info['sctp_info']
            src_port = sctp_info.get('src_port', '')
            dst_port = sctp_info.get('dst_port', '')
            chunks = sctp_info.get('chunks', [])
            chunk_descriptions = []
            for chunk in chunks:
                chunk_type = chunk.get('type', 'Unknown')
                chunk_flags = chunk.get('flags', '0x00')
                chunk_len = chunk.get('len', '0')
                chunk_descriptions.append(f"{chunk_type}({chunk_flags}, len={chunk_len})")
            
            options = sctp_info.get('options', '')  # SCTP Options„ÅÆÂèñÂæó
            message = f"SCTP {src_port}->{dst_port} Chunks: {', '.join(chunk_descriptions)} Options: {options}"
        
        # „É°„ÉÉ„Çª„Éº„Ç∏„ÅåÁ©∫„ÅÆÂ†¥Âêà„ÄÅ„Éó„É≠„Éà„Ç≥„É´Âêç„ÇíÂèñÂæó
        if not message:
            # 1. „Éó„É≠„Éà„Ç≥„É´ÊÉÖÂ†±„Åã„ÇâÁõ¥Êé•ÂêçÂâç„ÇíÂèñÂæó
            if 'protocol_name' in protocol_info:
                proto_name = protocol_info['protocol_name']
                # „Çµ„Éù„Éº„ÉàÂ§ñ„Å™„Çâ„Çø„Ç∞ËøΩÂä†
                if proto_name not in self.supported_protocols:
                    message = f"{proto_name} [Êú™„Çµ„Éù„Éº„Éà„Éó„É≠„Éà„Ç≥„É´]"
                else:
                    message = proto_name
            # 2. „Éë„Ç±„ÉÉ„Éà„ÅÆ„Éó„É≠„Éà„Ç≥„É´„Éï„Ç£„Éº„É´„Éâ„Çí‰ΩøÁî®
            elif protocol != 'UNKNOWN':
                message = f"{protocol}"
            # 3. Êó¢Â≠ò„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂá¶ÁêÜ
            else:
                ether_type = packet.get('mac_info', {}).get('ether_type', '')
                ip_proto = packet.get('ip_info', {}).get('protocol', '')
                
                if ether_type == '0x0800':  # IPv4
                    if ip_proto == '1':  # ICMP
                        message = "ICMP"
                    elif ip_proto == '6':  # TCP
                        message = "TCP"
                    elif ip_proto == '17':  # UDP
                        message = "UDP"
                    else:
                        message = f"IP Protocol {ip_proto}"
                elif ether_type == '0x0806':  # ARP
                    message = "ARP"
                elif ether_type == '0x86dd':  # IPv6
                    message = "IPv6"
                else:
                    message = f"EtherType {ether_type}"
        
        # VLANÊÉÖÂ†±„Åå„ÅÇ„Çå„Å∞ËøΩÂä†
        vlan_id = None
        # ÊòéÁ§∫ÁöÑ„Å™VLANÊÉÖÂ†±„Åå„ÅÇ„Çã„ÅãÁ¢∫Ë™ç
        if 'vlan_info' in info and info['vlan_info'].get('id'):
            vlan_id = info['vlan_info'].get('id')
        # mac_info„Åã„ÇâVLANÊÉÖÂ†±„ÇíÂèñÂæó
        if 'vlan_info' in info and info['vlan_info'].get('id'):
            vlan_id = info['vlan_info'].get('id')
        # mac_info„Åã„ÇâVLANÊÉÖÂ†±„ÇíÂèñÂæó
        elif 'mac_info' in info and info['mac_info'] is not None and info['mac_info'].get('vlan_id'):
            vlan_id = info['mac_info'].get('vlan_id')
        
        if vlan_id:
            message += f" (VLAN {vlan_id})"
        
        return message
    
    def _sanitize_id(self, text):
        """
        MermaidË®òÊ≥ï„Åß‰ΩøÁî®„Åß„Åç„ÇãË≠òÂà•Â≠ê„Å´Â§âÊèõ„Åô„Çã
        
        Args:
            text (str): Â§âÊèõ„Åô„ÇãÊñáÂ≠óÂàó
        
        Returns:
            str: ÂÆâÂÖ®„Å™Ë≠òÂà•Â≠ê
        """
        # ÁâπÊÆäÊñáÂ≠ó„ÇíÁΩÆÊèõ
        safe_id = text.replace('.', '_')
        safe_id = text.replace(':', '_')
        safe_id = text.replace('-', '_')
        safe_id = text.replace(' ', '_')
        
        # Êï∞Â≠ó„Åã„ÇâÂßã„Åæ„ÇãÂ†¥Âêà„ÄÅÂÖàÈ†≠„Å´'n'„ÇíËøΩÂä†
        if safe_id and safe_id[0].isdigit():
            safe_id = 'n' + safe_id
        
        return safe_id
    
    def _escape(self, text):
        """
        MermaidË®òÊ≥ï„Åß„Ç®„Çπ„Ç±„Éº„Éó„ÅåÂøÖË¶Å„Å™ÊñáÂ≠ó„Çí„Ç®„Çπ„Ç±„Éº„Éó„Åô„Çã
        MAC„Ç¢„Éâ„É¨„Çπ„ÅÆ„Ç≥„É≠„É≥„ÅØ„Éè„Ç§„Éï„É≥„Å´Â§âÊèõ„Åó„Å¶Ë¶ã„ÇÑ„Åô„Åè
        
        Args:
            text (str): „Ç®„Çπ„Ç±„Éº„Éó„Åô„ÇãÊñáÂ≠óÂàó
        
        Returns:
            str: „Ç®„Çπ„Ç±„Éº„Éó„Åï„Çå„ÅüÊñáÂ≠óÂàó
        """
        # MAC„Ç¢„Éâ„É¨„Çπ„Éë„Çø„Éº„É≥
        import re
        mac_pattern = re.compile(r'([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}')
        
        # MAC„Ç¢„Éâ„É¨„ÇπÂÜÖ„ÅÆ„Ç≥„É≠„É≥„Çí„Éè„Ç§„Éï„É≥„Å´Â§âÊèõ
        def replace_mac(match):
            return match.group(0).replace(':', '-')
        
        text_with_mac_fixed = re.sub(mac_pattern, replace_mac, text)
        
        return text_with_mac_fixed
